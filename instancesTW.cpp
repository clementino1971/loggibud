#include<iostream>
#include<fstream>
#include<string.h>
#include<vector>
#include<algorithm>
#include <iomanip>
#include<math.h>

using namespace std;

/*
     To compile you can use g++ instancesTW.cpp -o instancesTW
     To run you can use instancesTW <filename> <percent TW> <output file>

     filename = is a file on tsplib format generated by convert_all_data_files.py
     percent TW = is how many of clients will have a delivery window
     output file = file where the instance will be write
*/  

typedef pair<string,string> pdd;

struct instance{
    int n,Q;
    string name;
    int **d;
    int *q;
    int *e;
    int *l,*s;
    vector<pdd> customers;
};

int mx = 0;

void parse(ifstream &myfile,instance &I){
    string line;
    getline(myfile, line);
    size_t pos = line.find(" ");
    I.name = line.substr(pos+1, line.size()-pos-1);

    getline(myfile, line);
    getline(myfile, line);
    getline(myfile, line);
    pos = line.find(" ");
    I.n = stoi(line.substr(pos+1, line.size()-pos-1));

    getline(myfile, line);
    pos = line.find(" ");
    I.Q = stoi(line.substr(pos+1, line.size()-pos-1));

    cout << I.name << " " << I.n << " " << I.Q << "\n";

    for(int i=0;i<4;i++) getline(myfile, line);
    
    I.customers = vector<pdd>(I.n);
    for(int i=0;i<I.n;i++){
        getline(myfile, line);
        cout << line << "\n";
        pos = line.find(" ");
        line.erase(0, pos + 1);
        pos = line.find(" ");
        string lat = line.substr(0, pos);
        line.erase(0, pos + 1);
        pos = line.find(" ");
        string lon = line.substr(0, pos);
        
        cout << i <<" " <<  lat << " " << lon << "\n";
        I.customers[i] = {lat,lon};
    }
    
    getline(myfile, line);
    I.d = (int**) malloc(sizeof(int*)*I.n);
    for(int i=1;i<I.n;i++){
        I.d[i] = (int*) malloc(sizeof(int)*I.n);

        getline(myfile, line);
        for(int j=0;j<i;j++){
            pos = line.find(" ");
        
            I.d[i][j] = stoi(line.substr(0, min(line.size(),pos)));
            line.erase(0, pos + 1);

            if(j == 0) mx = max(I.d[i][j],mx);
        }        
       
    }
    cout << "mx:" << mx << "\n";

    for(int i=0;i<2;i++) getline(myfile, line);

    I.q = (int*) malloc(sizeof(int)*I.n);
    for(int i=0;i<I.n;i++){
        getline(myfile, line);

        pos = line.find(" ");
        int x = stoi(line.substr(0, min(line.size(),pos)));
        x--;
        line.erase(0, pos + 1);
        pos = line.find(" ");
        I.q[x] = stoi(line.substr(0, min(line.size(),pos)));
    }
}

int main(int argc,char *argv[]){
  
    if(argc != 4){
        cout << "Wrong parameters! The call should be: instancesTW <filename> <percent TW> <output file>\n";
        return 0;
    }else{
        ifstream myfile(argv[1]);
        
        if(myfile.is_open()){
            instance I;
           
            parse(myfile,I);

            I.e = (int*) malloc(sizeof(int)*I.n);
            I.l = (int*) malloc(sizeof(int)*I.n);
            I.s = (int*) malloc(sizeof(int)*I.n);

            srand (time(NULL));

            I.e[0] = 0;
            I.l[0]= 360000;  //em (10*m)...  12h .... Eu to considerando um carro com Vm = 30 km/h, percorre 360km em 12h
            I.s[0] = 0;
            
            vector<pair<double,int>> probs(I.n);
            for(int i=1;i<I.n;i++){

                probs[i] = {rand(),i};
                I.s[i] = 1000;
                I.e[i] = 0;
                I.l[i]= I.l[0] - I.d[i][0];
            }
        
            sort(probs.begin()+1,probs.end());

            //how many has TW
            double f = atoi(argv[2]);

            for(int i=1;i<(int)((f/100.0)*I.n);i++){

                int type = 1;
                int j = probs[i].second;

                if(type == 0){
                    //Random Interval
                    int lb = I.e[0] + I.d[j][0];
                    int ub = I.l[0] - I.d[j][0] - I.s[j];
                    int sz = ub - lb +1; 
                    int center = (rand() % sz) + lb;

                    int max_hwidth = (min(center-lb,ub-center) - 7500 + 1);
                    int hwidth = ((rand() % max_hwidth) + 7500); // Cada cliente tem uma janela mínima de 30 minutos;
                    
                    I.e[j] = center - hwidth;
                    I.l[j] = min(center + hwidth,I.l[0]-I.d[j][0]);
                }else{
                    //Fixed size interval
                    int lb = I.e[0] + I.d[j][0];
                    int ub = I.l[0] - I.d[j][0] - I.s[j];
                    int sz = ub - lb +1; 
                    int center = (rand() % sz) + lb;

                    int max_hwidth = (min(center-lb,ub-center) - 7500 + 1);
                    int hwidth = ((rand() % max_hwidth) + 7500); // Cada cliente tem uma janela mínima de 30 minutos;
                    
                    
                    I.e[j] = max(0,center - 30000);
                    I.l[j] = min(center + 30000,I.l[0]-I.d[j][0]);
                }
                
                cout << I.e[j] << " " << I.l[j] << " " << I.d[j][0] << "\n";
            }

            freopen(argv[3], "w", stdout);
            cout << I.name << "\n\n";
            cout << "VEHICLE\n";
            cout << "NUMBER\tCAPACITY\n";
            cout << I.n-1<<"\t"<< I.Q <<"\n\n";
            cout << "CUSTOMER\n";
            cout << left << setw(10) <<"CUST NO."
                 << left << setw(25) << "LONGITUDE"
                 << left << setw(25) << "LATITUDE"
                 << left << setw(10) <<"DEMAND"
                 << left << setw(12) <<"READY TIME"
                 << left << setw(10) <<"DUE DATE"
                 << left << setw(10) <<"SERVICE TIME\n";
            
            for(int i=0;i<I.n;i++){
                cout << left << setw(10) << i;
                cout << left << setw(25) << I.customers[i].first;
                cout << left << setw(25) << I.customers[i].second;
                cout << left << setw(10) << I.q[i];
                cout << left << setw(12) << I.e[i];
                cout << left << setw(10) << I.l[i];
                cout << left << setw(10) << I.s[i] << "\n";
            }

            cout << "\nLOWER_ROW";

            for(int i=0;i<I.n;i++){
                for(int j=0;j<i;j++){
                    cout << I.d[i][j] << " ";
                }
                cout << "\n";
            }

            myfile.close();
        }else{
            cout << "Unable to open file\n";
            return 0;
        }
    }
}
